const TelegramBot = require("node-telegram-bot-api");
const fs = require("fs");
const path = require("path");
const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

const OFFERS = [
  { title: "–ó–∞–π–º –¥–æ 100 000 ‚Ç∏", url: "https://example.com/offer1" },
  { title: "–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∑–∞–π–º 150 000 ‚Ç∏", url: "https://example.com/offer2" },
  { title: "–î–æ 200 000 ‚Ç∏ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫", url: "https://example.com/offer3" },
  { title: "–î–æ 250 000 ‚Ç∏ –∑–∞ 5 –º–∏–Ω—É—Ç", url: "https://example.com/offer4" }
];

const userStates = {};
const usersFile = path.join(__dirname, "users.txt");

function saveUserId(chatId) {
  fs.readFile(usersFile, "utf8", (err, data) => {
    const users = data ? data.split("\n") : [];
    if (!users.includes(chatId.toString())) {
      users.push(chatId);
      fs.writeFile(usersFile, users.join("\n"), () => {});
    }
  });
}

bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  const name = msg.from.first_name;

  saveUserId(chatId);

  if (!userStates[chatId] || text === "/start") {
    if (userStates[chatId]?.lastBotMessageId) {
      bot.deleteMessage(chatId, userStates[chatId].lastBotMessageId).catch(() => {});
    }
    userStates[chatId] = { step: "start" };

    const hello = await bot.sendMessage(chatId, `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${name}!\n\n–°—Ä–æ—á–Ω–æ –Ω—É–∂–Ω—ã –¥–µ–Ω—å–≥–∏?\n–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –∑–∞–π–º –∑–∞ 1 –º–∏–Ω—É—Ç—É. –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –∏ —è –ø–æ–¥–±–µ—Ä—É –¥–ª—è –≤–∞—Å —Å–∞–º—ã–µ –≤—ã–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.`);
    userStates[chatId].lastBotMessageId = hello.message_id;

    const button = await bot.sendMessage(chatId, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "–ü–æ–¥–æ–±—Ä–∞—Ç—å –∑–∞–π–º", callback_data: "start_loan" }]
        ]
      }
    });
    userStates[chatId].lastBotMessageId = button.message_id;
    return;
  }

  const user = userStates[chatId];
  user.lastUserMessageId = msg.message_id;

  if (user.step === "amount") {
    const amount = parseInt(text.replace(/\D/g, ""));

    if (
      isNaN(amount) ||
      amount < 10000 ||
      amount > 500000 ||
      amount % 10000 !== 0
    ) {
      const warn = await bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ—Ç 10 000 –¥–æ 500 000 —Ç–µ–Ω–≥–µ, —à–∞–≥–æ–º 10 000.");
      if (user.lastBotMessageId) bot.deleteMessage(chatId, user.lastBotMessageId).catch(() => {});
      user.lastBotMessageId = warn.message_id;
      return;
    }

    user.amount = amount;
    user.step = "overdue";
    if (user.lastUserMessageId) bot.deleteMessage(chatId, user.lastUserMessageId).catch(() => {});
    if (user.lastBotMessageId) bot.deleteMessage(chatId, user.lastBotMessageId).catch(() => {});
    const msgSent = await bot.sendMessage(chatId, "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –ø—Ä–æ—Å—Ä–æ—á–∫–∏?", {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "–î–∞", callback_data: "overdue_yes" },
            { text: "–ù–µ—Ç", callback_data: "overdue_no" }
          ]
        ]
      }
    });
    user.lastBotMessageId = msgSent.message_id;
  }
});

bot.on("callback_query", async (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;
  const user = userStates[chatId] || {};

  saveUserId(chatId);

  if (user.lastBotMessageId) {
    bot.deleteMessage(chatId, user.lastBotMessageId).catch(() => {});
  }

  if (data === "start_loan") {
    userStates[chatId] = { step: "amount" };
    const ask = await bot.sendMessage(chatId, "–ö–∞–∫–∞—è —Å—É–º–º–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?");
    userStates[chatId].lastBotMessageId = ask.message_id;
    return;
  }

  if (data.startsWith("overdue_")) {
    user.overdue = data === "overdue_yes" ? "–î–∞" : "–ù–µ—Ç";
    user.step = "job";

    const msgSent = await bot.sendMessage(chatId, "–í—ã —Å–µ–π—á–∞—Å —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–µ–Ω—ã?", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "–¢—Ä—É–¥–æ—É—Å—Ç—Ä–æ–µ–Ω", callback_data: "job_working" }],
          [{ text: "–ù–µ —Ä–∞–±–æ—Ç–∞—é", callback_data: "job_unemployed" }],
          [{ text: "–°—Ç—É–¥–µ–Ω—Ç", callback_data: "job_student" }],
          [{ text: "–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä", callback_data: "job_pensioner" }]
        ]
      }
    });
    user.lastBotMessageId = msgSent.message_id;
    return;
  }

  if (data.startsWith("job_")) {
    user.job = data.replace("job_", "");
    user.step = "age";

    const msgSent = await bot.sendMessage(chatId, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "18 - 24", callback_data: "age_18_24" }],
          [{ text: "25 - 45", callback_data: "age_25_45" }],
          [{ text: "45+", callback_data: "age_45_plus" }]
        ]
      }
    });
    user.lastBotMessageId = msgSent.message_id;
    return;
  }

  if (data.startsWith("age_")) {
    user.age = data.replace("age_", "").replace("_", " - ");
    user.step = "reason";

    const msgSent = await bot.sendMessage(chatId, "–î–ª—è –∫–∞–∫–∏—Ö —Ü–µ–ª–µ–π –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–µ–Ω—å–≥–∏?", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "–ü–æ–≥–∞—à–µ–Ω–∏–µ –¥–æ–ª–≥–∞", callback_data: "reason_debt" }],
          [{ text: "–ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤", callback_data: "reason_goods" }],
          [{ text: "–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã", callback_data: "reason_emergency" }],
          [{ text: "–î—Ä—É–≥–æ–µ", callback_data: "reason_other" }]
        ]
      }
    });
    user.lastBotMessageId = msgSent.message_id;
    return;
  }

  if (data.startsWith("reason_")) {
    const reasons = {
      debt: "–ü–æ–≥–∞—à–µ–Ω–∏–µ –¥–æ–ª–≥–∞",
      goods: "–ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤",
      emergency: "–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã",
      other: "–î—Ä—É–≥–æ–µ"
    };
    user.reason = reasons[data.replace("reason_", "")];
    user.step = "processing";

    const waitMsg = await bot.sendMessage(chatId, "–°–ø–∞—Å–∏–±–æ! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥–±–∏—Ä–∞—é –∑–∞–π–º...");
    user.lastBotMessageId = waitMsg.message_id;

    await new Promise(resolve => setTimeout(resolve, 10000));

    const randomOffers = OFFERS.sort(() => 0.5 - Math.random()).slice(0, 2);

    const result = await bot.sendMessage(chatId,
      `–ü–æ–¥–æ–±—Ä–∞–ª –¥–ª—è –≤–∞—Å –¥–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –Ω–∞–∏–≤—ã—Å—à–∏–º —à–∞–Ω—Å–æ–º –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ!\n\n` +
      `–î–æ—Å—Ç—É–ø–Ω–æ: ${user.amount}‚Ç∏\n` +
      `–î–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–µ–∑ –ø—Ä–æ—Å—Ä–æ—á–µ–∫\n\n` +
      `‚åõ–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ 30 –º–∏–Ω—É—Ç`, {
        reply_markup: {
          inline_keyboard: randomOffers.map((offer) => [
            { text: offer.title, url: offer.url }
          ])
        }
      }
    );

    user.lastBotMessageId = result.message_id;
    delete userStates[chatId];
  }
});

// –†–∞—Å—Å—ã–ª–∫–∞ —Ä–µ–∫–ª–∞–º—ã –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
setInterval(() => {
  fs.readFile(usersFile, "utf8", async (err, data) => {
    if (err || !data) return;
    const users = data.split("\n").filter(Boolean);
    for (const chatId of users) {
      try {
        await bot.sendMessage(chatId, "üî• –ù–æ–≤—ã–π –∑–∞–π–º —Å –æ–¥–æ–±—Ä–µ–Ω–∏–µ–º 95%! –ü–æ–ª—É—á–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –∑–∞ 5 –º–∏–Ω—É—Ç!\n\n–û—Ñ–æ—Ä–º–∏—Ç—å: https://example.com/promo");
      } catch (e) {
        console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ${chatId}:`, e.message);
      }
    }
  });
}, 10 * 60 * 1000);
