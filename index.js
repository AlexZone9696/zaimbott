const TelegramBot = require("node-telegram-bot-api");
const fs = require("fs");
const path = require("path");

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

// –°–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤
const OFFERS = [
  { title: "–ó–∞–π–º –¥–æ 100 000 ‚Ç∏", url: "https://example.com/offer1" },
  { title: "–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∑–∞–π–º 150 000 ‚Ç∏", url: "https://example.com/offer2" },
  { title: "–î–æ 200 000 ‚Ç∏ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫", url: "https://example.com/offer3" },
  { title: "–î–æ 250 000 ‚Ç∏ –∑–∞ 5 –º–∏–Ω—É—Ç", url: "https://example.com/offer4" }
];

// –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = {};

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const usersFile = path.join(__dirname, "users.txt");

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç chatId –≤ —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â—ë –Ω–µ—Ç.
 * –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ñ–∞–π–ª–∞ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π.
 */
async function saveUserId(chatId) {
  let users = [];
  try {
    const data = await fs.promises.readFile(usersFile, "utf8");
    users = data.split("\n").filter(Boolean);
  } catch (err) {
    if (err.code !== "ENOENT") {
      console.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", err);
      return;
    }
    // ENOENT ‚Äî —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: –±—É–¥–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å
  }

  const idStr = chatId.toString();
  if (!users.includes(idStr)) {
    users.push(idStr);
    try {
      await fs.promises.writeFile(usersFile, users.join("\n"));
      console.log(`–î–æ–±–∞–≤–∏–ª–∏ chatId ${idStr} –≤ ${usersFile}`);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", err);
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  const name = msg.from.first_name;

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID (—Å –æ–∂–∏–¥–∞–Ω–∏–µ–º)
  await saveUserId(chatId);

  // –ï—Å–ª–∏ –Ω–∞—á–∞–ª–æ –∏–ª–∏ /start ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  if (!userStates[chatId] || text === "/start") {
    if (userStates[chatId]?.lastBotMessageId) {
      await bot.deleteMessage(chatId, userStates[chatId].lastBotMessageId).catch(() => {});
    }
    userStates[chatId] = { step: "start" };

    const hello = await bot.sendMessage(
      chatId,
      `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${name}!\n\n–°—Ä–æ—á–Ω–æ –Ω—É–∂–Ω—ã –¥–µ–Ω—å–≥–∏?\n–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –∑–∞–π–º –∑–∞ 1 –º–∏–Ω—É—Ç—É. –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.`
    );
    userStates[chatId].lastBotMessageId = hello.message_id;

    const button = await bot.sendMessage(chatId, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:", {
      reply_markup: {
        inline_keyboard: [[{ text: "–ü–æ–¥–æ–±—Ä–∞—Ç—å –∑–∞–π–º", callback_data: "start_loan" }]]
      }
    });
    userStates[chatId].lastBotMessageId = button.message_id;
    return;
  }

  // –î–∞–ª—å–Ω–µ–π—à–∞—è –ª–æ–≥–∏–∫–∞, –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ —Å—É–º–º–∞
  const user = userStates[chatId];
  if (user.step === "amount") {
    const amount = parseInt(text.replace(/\D/g, ""), 10);
    if (
      isNaN(amount) ||
      amount < 10000 ||
      amount > 500000 ||
      amount % 10000 !== 0
    ) {
      const warn = await bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ—Ç 10 000 –¥–æ 500 000 ‚Ç∏ —à–∞–≥–æ–º 10 000.");
      if (user.lastBotMessageId) {
        await bot.deleteMessage(chatId, user.lastBotMessageId).catch(() => {});
      }
      user.lastBotMessageId = warn.message_id;
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    user.amount = amount;
    user.step = "overdue";
    const msgSent = await bot.sendMessage(chatId, "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –ø—Ä–æ—Å—Ä–æ—á–∫–∏?", {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "–î–∞", callback_data: "overdue_yes" },
            { text: "–ù–µ—Ç", callback_data: "overdue_no" }
          ]
        ]
      }
    });
    user.lastBotMessageId = msgSent.message_id;
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π inline-–∫–Ω–æ–ø–æ–∫
bot.on("callback_query", async (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID (—Å –æ–∂–∏–¥–∞–Ω–∏–µ–º)
  await saveUserId(chatId);

  // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –±–æ—Ç-—Å–æ–æ–±—â–µ–Ω–∏–µ
  const user = userStates[chatId] || {};
  if (user.lastBotMessageId) {
    await bot.deleteMessage(chatId, user.lastBotMessageId).catch(() => {});
  }

  // –°—Ç–∞—Ä—Ç –ø–æ–¥–±–æ—Ä–∞ –∑–∞–π–º–∞
  if (data === "start_loan") {
    userStates[chatId] = { step: "amount" };
    const ask = await bot.sendMessage(chatId, "–ö–∞–∫–∞—è —Å—É–º–º–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?");
    userStates[chatId].lastBotMessageId = ask.message_id;
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ –ø—Ä–æ—Å—Ä–æ—á–∫–∞–º
  if (data.startsWith("overdue_")) {
    user.overdue = data === "overdue_yes" ? "–î–∞" : "–ù–µ—Ç";
    user.step = "job";
    const msgSent = await bot.sendMessage(chatId, "–í—ã —Å–µ–π—á–∞—Å —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–µ–Ω—ã?", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "–¢—Ä—É–¥–æ—É—Å—Ç—Ä–æ–µ–Ω", callback_data: "job_working" }],
          [{ text: "–ù–µ —Ä–∞–±–æ—Ç–∞—é", callback_data: "job_unemployed" }],
          [{ text: "–°—Ç—É–¥–µ–Ω—Ç", callback_data: "job_student" }],
          [{ text: "–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä", callback_data: "job_pensioner" }]
        ]
      }
    });
    user.lastBotMessageId = msgSent.message_id;
    return;
  }

  // –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è job_, age_, reason_ –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —à–∞–≥–∞‚Ä¶
});

// –†–∞—Å—Å—ã–ª–∫–∞ —Ä–µ–∫–ª–∞–º—ã –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
setInterval(async () => {
  let data;
  try {
    data = await fs.promises.readFile(usersFile, "utf8");
  } catch {
    return; // —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω ‚Äî –Ω–∏–∫–æ–º—É –Ω–µ —à–ª—ë–º
  }
  const users = data.split("\n").filter(Boolean);
  for (const chatId of users) {
    try {
      await bot.sendMessage(
        chatId,
        "üî• –ù–æ–≤—ã–π –∑–∞–π–º —Å –æ–¥–æ–±—Ä–µ–Ω–∏–µ–º 95%! –ü–æ–ª—É—á–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –∑–∞ 5 –º–∏–Ω—É—Ç!\n\n–û—Ñ–æ—Ä–º–∏—Ç—å: https://example.com/promo"
      );
    } catch (e) {
      console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ${chatId}:`, e.message);
    }
  }
}, 10 * 60 * 1000);
